도메인 - 구현
데이터 - abstact
UseCase - API 호출, DB접근 ,DTO
Provider - 데이터에 직접적인 변형을 하는 부분?
데이터의 Usecase와 Repository에서 구현을 한다.
도메인의 Usecase와 Repository에서는 구현을 하지 않는다.

Clean Architecture
  Presentation
    UI - A 기능을 위한 버튼 또는 위젯 등
         1. A 버튼을 누르면 액션을 컨트롤러에 저장
    Controller - A 기능을 위해 조작된 버튼 및 위젯의 액션을 받아주고 도메인과의 번역을 담당
                 2. A 기능의 로직을 담은 Usecase 실행
  Domain
    Usecase - A 기능의 어플리케이션 비즈니스 룰 담당
              3. A 기능의 실행을 위해 필요한 Entity들을 통해 최종 결정
              4. A 기능이 실행되고 나면 이를 Repository를 실행하고 이를 반영
    Entities - 핵심 기능 룰을 담은 Enterprise Business Rule 담당
  Data
    Repository
Data
    DTO - 넌 DTO
    UseCase - Provider에서 UseCase를 호출해 사용
    Repository - 변경이 일어날 때 다른 부분에서의 수정을 최소화하기 위해 Provider에서 UseCase를 호출해 사용하도록 한다.
                 Data Source에서 DB에 접근해 리턴된 값에 따라 로직을 작성하는 부분  
    data_source - DB 접근

내부 DB
sharedpreferences - 세션, 토큰에 관한 간단한 정보만 저장
sqflite - 채팅 정보(내용, 전송자, 전송 시간) 저장
path_provider - 파일 저장 가능
<app>

- 실행용.. main.dart만 존재?

<data>

- DTO

- DataSource
  : DB에 직접 접근하는 부분
  : 쿼리문 작성

- Repository
  // : API 호출 (fetch ...)
  : DataSource의 메서드 가져와서 결과값에 따른 처리방법 제시 (+ 예외처리)

- UseCase
  : Repository에서 메서드 가져와서 결과값에 따른 처리방법 제시 (+ 예외처리)

<domain>


- Entity

- Repository : 추상클래스 (data단에서 구현)

- UseCase : 추상클래스 (data단에서 구현)

<presentation>

- Widgets

- Providers
  : usecase에서 메서드 끌어다가 사용
  : usecase에서 가져온 정보 view&widget에 뿌려주기

- views
  : screens 같은 느낌..
  : scaffold return

[DB]
- Shared Preference : 로그인 정보 등 .. 간단 정보
- SQlite : 채팅 정보 저장 (텍스트)
- path_provider : 파일 전송시 이용예정 ....